/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
AnSynthAudioProcessor::AnSynthAudioProcessor()
{
}

AnSynthAudioProcessor::~AnSynthAudioProcessor()
{
}

//==============================================================================
const String AnSynthAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String AnSynthAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String AnSynthAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool AnSynthAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool AnSynthAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool AnSynthAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool AnSynthAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

bool AnSynthAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double AnSynthAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int AnSynthAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
    // so this should be at least 1, even if you're not really implementing programs.
}

int AnSynthAudioProcessor::getCurrentProgram()
{
    return 0;
}

void AnSynthAudioProcessor::setCurrentProgram (int index)
{
}

const String AnSynthAudioProcessor::getProgramName (int index)
{
    return String();
}

void AnSynthAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void AnSynthAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    currentSampleRate = sampleRate;
}

void AnSynthAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void AnSynthAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const float level = 0.125f;
    
    float *channelData = buffer.getWritePointer(0);
    
    updateAngleDelta();
    
    for (int sample = 0; sample < buffer.getNumSamples(); ++sample)
    {
        const float currentSample = (float) std::sin(currentAngle);
        currentAngle += angleDelta;
        channelData[sample] = currentSample * level;
    }
}

//==============================================================================
bool AnSynthAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* AnSynthAudioProcessor::createEditor()
{
    return new AnSynthAudioProcessorEditor (*this);
}

//==============================================================================
void AnSynthAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void AnSynthAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}


void AnSynthAudioProcessor::updateAngleDelta()
{
    const double cyclesPerSample = freq / currentSampleRate;
    angleDelta = cyclesPerSample * 2.0 * double_Pi;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new AnSynthAudioProcessor();
}

